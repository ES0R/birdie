
/***************************************************************************
*   Copyright (C) 2020 by DTU (Christian Andersen)                        *
*   jca@elektro.dtu.dk                                                    *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU Lesser General Public License as        *
*   published by the Free Software Foundation; either version 2 of the    *
*   License, or (at your option) any later version.                       *
*                                                                         *
*   This program is distributed in the hope that it will be useful,       *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU Lesser General Public License for more details.                   *
*                                                                         *
*   You should have received a copy of the GNU Lesser General Public      *
*   License along with this program; if not, write to the                 *
*   Free Software Foundation, Inc.,                                       *
*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
***************************************************************************/

#ifndef UPLAY_H
#define UPLAY_H

#include <thread>
#include <mutex>

using namespace std;

/**
 * Class to start a thread that plays a 
 * sound track using default player (play).
 * The music runs until finished or when explicitly stopped.
 * \method start()   Start by calling 'start()'.
 * \method stopPlaying()  Stop process by calling 'stopPlaying()'.
 * */
class UPlay
{
public:
  /** destructor */
  ~UPlay()
  {
    stop();
  }
  /**
   * Name of file to play.
   * */
  void play(const char * thisfile)
  {
    setFile(thisfile);
    start();
  }
  /**
   * thread part, never call this directly, use start()
   * */
  virtual void run();
  void start();
  void stop();
  /**
   * Test if we are playing anything */
  bool isPlaying();
  /**
   * Name of file to play.
   * NB! the file must hard coded or in a percistent string.
   * */
  void setFile(const char * file);
  /**
   * Set volume (0..100) */
  void setVolume(float level);
  
protected:
  // default music.mp3 is a symbolic link to some music
  static const int MFL = 1500;
  char fileToPlay[MFL] = "/home/chr/Music/music.mp3";
  float volume = 0.1;
  thread * player = nullptr;
  static void startloop(UPlay * thisPlayer); /// To spawn the listen loop as a separate thread, it needs to be static
};

/**
 * Another class to also speak a text. */

class USay : public UPlay
{
public:
  /**
   * Run the conversion from text to wav */
  void convertAndPlay();
  /**
   * Test if we are playing anything */
  bool isSaying();
  /**
   * Say this sentence, i.e. convert to a wav file and play this file 
   * \param sentence is the text to say.
   * \param volume is an optional volume from 0% (silent) to 100%.
   * \return false if playing is busy, else true */
  bool say(const char * sentence, float volume = -1);
    
protected:
  bool saying = false;
};

extern USay sound;

#endif
