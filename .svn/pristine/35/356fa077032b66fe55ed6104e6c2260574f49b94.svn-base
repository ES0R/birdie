/*  
 * 
 * Copyright © 2022 DTU, 
 * Author:
 * Christian Andersen jcan@dtu.dk
 * 
 * The MIT License (MIT)  https://mit-license.org/
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the “Software”), to deal in the Software without restriction, 
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
 * is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies 
 * or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE. */

#include <string>
#include <string.h>
#include <thread>
#include <math.h>
#include "sencoder.h"
#include "cmixer.h"
#include "cmotor.h"
#include "steensy.h"
#include "uservice.h"

// create value
CMixer mixer;


/// mixer class combines drive orders to desired wheel velocity
void CMixer::setup()
{ // ensure there is default values in ini-file
  if (not ini.has("mixer"))
  { // no data yet, so generate some default values
    ini["mixer"]["log"] = "true";
    ini["mixer"]["print"] == "false";
  }
  // get values from ini-file
  //
  wheelbase = strtof(ini["pose"]["wheelbase"].c_str(), nullptr);
  turnrateControl = ini["turnrate"]["enabled"] == "true";
  // wheelbase must not be zero or negative
  if (wheelbase < 0.005)
    wheelbase = 0.22;
  //
  toConsole = ini["mixer"]["print"] == "true";
  if (ini["mixer"]["log"] == "true")
  { // open logfile
    std::string fn = service.logPath + "log_mixer.txt";
    logfile = fopen(fn.c_str(), "w");
    fprintf(logfile, "%% Mixer logfile\n");
    fprintf(logfile, "%% Wheel base used in calculation: %g\n", wheelbase);
    fprintf(logfile, "%% 1 \tTime (sec)\n");
    fprintf(logfile, "%% 2 \tmanual override mode\n");
    fprintf(logfile, "%% 3 \tLinear velocity (m/s)\n");
    fprintf(logfile, "%% 4 \tTurnrate reference (rad/sec) positive is CCV\n");
    fprintf(logfile, "%% 5 \tTurnrate after heading control (rad/sec) positive is CCV\n");
    fprintf(logfile, "%% 6 \tDesired left wheel velocity (m/s)\n");
    fprintf(logfile, "%% 7 \tDesired right wheel velocity (m/s)\n");
    fprintf(logfile, "%% 8 \tDesired turn radius (999 if straight) (m)\n");
  }
}

void CMixer::terminate()
{
  if (logfile != nullptr)
  {
    UTime t("now");
    char d[100];
    t.getDateTimeAsString(d);
    fprintf(logfile, "%% ended at %lu.%4ld %s\n", t.getSec(), t.getMicrosec()/100, d);
    fclose(logfile);
    logfile = nullptr;
    printf("# CMixer:: %% ended at %lu.%4ld %s\n", t.getSec(), t.getMicrosec()/100, d);
  }
}


void CMixer::setVelocity(float linearVelocity, float turnVelocity)
{
  if (manualOverride)
  {
    manualLinVel = linearVelocity;
    manualTurnrateRef = turnVelocity;
  }
  else
  {
    autoLinVel = linearVelocity;
    autoTurnrateRef = turnVelocity;
  }
  updateVelocities();
}


void CMixer::setVelocity(float linearVelocity)
{
  if (manualOverride)
    manualLinVel = linearVelocity;
  else
    autoLinVel = linearVelocity;
  updateVelocities();
}


void CMixer::setTurnrate(float turnVelocity)
{
  if (manualOverride)
    manualTurnrateRef = turnVelocity;
  else
    autoTurnrateRef = turnVelocity;
  updateVelocities();
}


void CMixer::updateVelocities()
{ // trigger new calculation
  printf("# CMixer:: update\n");
  if (manualOverride)
  {
    linVel = manualLinVel;
    turnrateRef = manualTurnrateRef;
  }
  else
  {
    linVel = autoLinVel;
    turnrateRef = autoTurnrateRef;
  }
  if (not turnrateControl)
    turnrate = turnrateRef;
  //
  bool fast = updateTime.getTimePassed() < 0.025;
  updateTime.now();
  if (not fast)
  { // add to log before update - to make better Matlab plots
    toLog();
  }
  //
  translateToWheelVelocity();
  //
  toLog();
}

void CMixer::translateToWheelVelocity()
{ // velocity difference to get the desired turn rate.
  velDif = wheelbase * turnrate;
  float v0; // left
  float v1; // right
  // adjust each wheel with half difference
  // positive turn-rate (CCV) makes right wheel
  // turn faster forward
  v1 = linVel + velDif/2;
  v0 = v1 - velDif;
  // turn radius (for logging only)
  //
  // linvel = (v0+v1)/2
  // linvel = turnRadius * turnrate
  // turnRadius = linvel / turnrate
  //
  const float minTurnrate = 0.001; // rad/s
  if (turnrate > minTurnrate or turnrate < -minTurnrate)
    turnRadius = linVel / turnrate;
  else if (velDif > 0)
    turnRadius = linVel / minTurnrate;
  else
    turnRadius = linVel / -minTurnrate;
  // implement result
  wheelVelRef[0] = v0;
  wheelVelRef[1] = v1;
  updateCnt++;
}

void CMixer::toLog()
{
  if (logfile != nullptr)
  { // add to log after update
    fprintf(logfile, "%lu.%04ld %d %.3f %.4f %.4f %.3f %.3f %.2f\n", updateTime.getSec(), updateTime.getMicrosec()/100,
            manualOverride, linVel, turnrateRef, turnrate, wheelVelRef[0], wheelVelRef[1], turnRadius);
  }
  if (toConsole)
  {
    printf("%lu.%04ld %d %.3f %.4f %.4f %.3f %.3f %.2f\n",
           updateTime.getSec(), updateTime.getMicrosec()/100,
           manualOverride, linVel, turnrateRef, turnrate, wheelVelRef[0], wheelVelRef[1], turnRadius);
  }
}
